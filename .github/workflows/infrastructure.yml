name: Infrastructure Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      confirm_deployment:
        description: 'Type "DEPLOY" to confirm (required for apply/destroy)'
        required: false
        type: string
      auto_approve:
        description: 'Auto-approve changes (use with caution)'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: read
  security-events: write

env:
  AWS_REGION: eu-west-2
  TF_CLI_ARGS: "-lock-timeout=10m"

jobs:
  terraform-security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Run TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: TFLint Scan
        run: |
          cd terraform
          tflint --init
          tflint --format sarif --out tflint-results.sarif || true
          
          # Check for critical issues only
          if tflint --format compact | grep -E "(ERROR|WARN)" | grep -i "critical"; then
            echo "Critical TFLint issues found!"
            exit 1
          else
            echo "No critical TFLint issues found"
          fi

      - name: Upload TFLint results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('terraform/tflint-results.sarif') != ''
        continue-on-error: true
        with:
          sarif_file: terraform/tflint-results.sarif

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          soft_fail: true
          skip_check: CKV_AWS_79,CKV_AWS_23  # Skip non-critical checks

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('checkov-results.sarif') != ''
        continue-on-error: true
        with:
          sarif_file: checkov-results.sarif

      - name: Check for Critical Security Issues
        run: |
          # Check Checkov results for critical issues
          if [ -f checkov-results.sarif ]; then
            if jq '.runs[0].results[] | select(.level == "error")' checkov-results.sarif | grep -q "error"; then
              echo "Critical security issues found by Checkov!"
              exit 1
            else
              echo "No critical security issues found by Checkov"
            fi
          fi

  terraform-plan:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: terraform-security-scan
    if: github.event.inputs.action == 'plan'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        timeout-minutes: 10
        run: |
          cd terraform
          terraform plan -out=tfplan -input=false
          terraform show -no-color tfplan > plan.txt

      - name: Output Plan Results
        run: |
          cd terraform
          echo "## Terraform Plan Results"
          echo ""
          cat plan.txt

  terraform-apply:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: terraform-security-scan
    if: github.event.inputs.action == 'apply'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Require Manual Confirmation
        if: github.event.inputs.auto_approve != 'true'
        run: |
          if [ "${{ github.event.inputs.confirm_deployment }}" != "DEPLOY" ]; then
            echo "Deployment not confirmed!"
            echo "Type 'DEPLOY' in the confirm_deployment field to proceed with ${{ github.event.inputs.action }}"
            echo "This prevents accidental deployments and ensures you're ready to proceed"
            exit 1
          fi
          echo "Deployment confirmed for ${{ github.event.inputs.action }}"

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        timeout-minutes: 10
        run: |
          cd terraform
          terraform plan -out=tfplan -input=false

      - name: Terraform Apply
        timeout-minutes: 15
        run: |
          cd terraform
          if [ "${{ github.event.inputs.auto_approve }}" = "true" ]; then
            echo "Applying changes with auto-approve..."
            terraform apply -auto-approve tfplan
          else
            echo "Applying changes..."
            terraform apply tfplan
          fi
          echo "Infrastructure deployment completed successfully"

      - name: Output Results
        run: |
          cd terraform
          echo "## Infrastructure Applied Successfully!"
          echo ""
          echo "### Key Outputs:"
          terraform output

  terraform-destroy:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: terraform-security-scan
    if: github.event.inputs.action == 'destroy'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Require Auto-approve for Destroy
        if: github.event.inputs.auto_approve != 'true'
        run: |
          echo "Destroy operations require auto-approve to prevent state lock issues!"
          echo "Please check the 'Auto-approve changes' option when running destroy"
          echo "This ensures the operation completes without manual confirmation"
          exit 1

      - name: Require Manual Confirmation
        if: github.event.inputs.auto_approve == 'true'
        run: |
          if [ "${{ github.event.inputs.confirm_deployment }}" != "DEPLOY" ]; then
            echo "Destroy not confirmed!"
            echo "Type 'DEPLOY' in the confirm_deployment field to proceed with destroy"
            echo "This prevents accidental infrastructure destruction"
            exit 1
          fi
          echo "Destroy confirmed"

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan (Destroy)
        timeout-minutes: 10
        run: |
          cd terraform
          terraform plan -destroy -out=tfplan -input=false

      - name: Terraform Destroy
        timeout-minutes: 15
        run: |
          cd terraform
          if [ "${{ github.event.inputs.auto_approve }}" = "true" ]; then
            echo "Destroying infrastructure with auto-approve..."
            terraform destroy -auto-approve
          else
            echo "Destroying infrastructure..."
            terraform destroy
          fi
          echo "Infrastructure destruction completed"

      - name: Output Results
        run: |
          echo "## Infrastructure Destroyed Successfully!"
          echo ""
          echo "All resources have been removed from AWS."