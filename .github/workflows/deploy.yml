name: Deploy to ECS

on:
  workflow_dispatch:
    inputs:
      image-tag:
        description: 'Image tag (leave empty for latest)'
        required: false
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    env:
      AWS_REGION: eu-west-2
      ECS_TASK_FAMILY: url-shortener
      CODEDEPLOY_APP: url-shortener-codedeploy-app
      CODEDEPLOY_GROUP: url-shortener-dg
      S3_BUCKET: url-shortener-codedeploy-revisions

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get image URI
        id: image
        run: |
          if [ -n "${{ inputs.image-tag }}" ]; then
            TAG="${{ inputs.image-tag }}"
          else
            TAG=$(aws ecr describe-images --repository-name url-shortener --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text)
          fi
          REGISTRY=$(aws ecr describe-repositories --repository-names url-shortener --query 'repositories[0].repositoryUri' --output text | cut -d'/' -f1)
          IMAGE_URI="$REGISTRY/url-shortener:$TAG"
          echo "uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Get current task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_FAMILY }} --query taskDefinition > task-def.json
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' task-def.json > task-def-clean.json

      - name: Update task definition
        run: |
          jq --arg img "${{ steps.image.outputs.uri }}" '.containerDefinitions[0].image = $img' task-def-clean.json > new-task-def.json

      - name: Register task definition
        id: task
        run: |
          ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "arn=$ARN" >> $GITHUB_OUTPUT

      - name: Update appspec.yml
        run: |
          sed -i "s|TaskDefinition: \".*\"|TaskDefinition: \"${{ steps.task.outputs.arn }}\"|g" revisions/appspec.yml
          aws s3 cp revisions/appspec.yml s3://${{ env.S3_BUCKET }}/appspec.yml

      - name: Create deployment
        id: deploy
        run: |
          ID=$(aws deploy create-deployment \
            --application-name ${{ env.CODEDEPLOY_APP }} \
            --deployment-group-name ${{ env.CODEDEPLOY_GROUP }} \
            --s3-location bucket=${{ env.S3_BUCKET }},key=appspec.yml,bundleType=YAML \
            --query deploymentId --output text)
          echo "id=$ID" >> $GITHUB_OUTPUT

      - name: Wait for deployment
        run: |
          aws deploy wait deployment-successful --deployment-id ${{ steps.deploy.outputs.id }}
